SE3-LP WiSe 2020/2021
Übung Gr.04:
    Merle Hoffmann      (7031673)
    Lukas Kiefer        (7260745)
    Björn Mutschinski   (7029008)


Aufgabenblatt 4:


Aufgabe 1:     
        Wir gehen bei der Aufgabe davon aus, dass jeder Käufer ein Besitzer und 
        jeder Verkäufer ein Vorbesitzer ist.
1.1:   
    Der Vorteil dieser Implementationsvariante ist, dass alle Vorbesitzer auf einmal
    ausgegeben werden. Zudem werden nicht nur die unmittelbaren, sondern alle in der 
    Datenbank enthaltenden Vorbesitzer ausgegeben. 
    Nachteil ist, dass die Vorbesitzer nicht in der richtigen Reihenfolge sind.

    Das Prädikat findet zunächst alle vorherigen Verkäufer des Hauses, danach alle
    vorherigen Käufer des Hauses und fügt diese als Menge zusammen. Wenn man die 
    Suche nach den vorherigen Käufern weglassen würde, würden die Vorbesitzer, 
    die keinen Eintrag als Verkäufer haben, nicht gefunden werden. Somit wird auch 
    der Fall eines fehlenden Eintrags abgedeckt.

-----------------------------------------------------------------
%vorbesitzer1(?ObjektID,?Besitzer,-Vorbesitzer)
vorbesitzer1(ObjektID,Besitzer,Vorbesitzer) :-
    bew(_,ObjektID,_,Besitzer,_,Datum1),
    findall(Verkaeufer,
            (bew(_,ObjektID,Verkaeufer,_,_,Datum2), Datum1>=Datum2),
            Verkaeuferliste),
    findall(Kaeufer,
            (bew(_,ObjektID,_,Kaeufer,_,Datum3), Datum1>Datum3),
            Kaeuferliste),
    append(Verkaeuferliste,Kaeuferliste,Liste),
    list_to_set(Liste,Vorbesitzer).
-----------------------------------------------------------------

Testanfragen:   
bew(5,3,woehler,baumgartner,315000,19501201). hinzugefügt!
-----------------------------------------------------------------
%vorbesitzer1(+,+,-): 
%    gibt eine Liste aller Vorbesitzer zu dem Besitzer und Haus aus.
?- vorbesitzer1(3,mueller,Vorbesitzer).
Vorbesitzer = [schulze, schneider, woehler, baumgartner].

%vorbesitzer1(+,-,-):
%    gibt alle Käufer des Hauses und jeweils all deren Vorbesitzer aus.
?- vorbesitzer1(3,Besitzer,Vorbesitzer).
Besitzer = schneider,
Vorbesitzer = [schulze, woehler, baumgartner] ;
Besitzer = mueller,
Vorbesitzer = [schulze, schneider, woehler, baumgartner] ;
Besitzer = baumgartner,
Vorbesitzer = [woehler].

%vorbesitzer1(-,+,-):
%    gibt alle Häuser-IDs und alle zugehörigen Vorbesitzer eines Besitzers aus.
?- vorbesitzer1(X,mueller,Vorbesitzer).
X = 3,
Vorbesitzer = [schulze, schneider, woehler, baumgartner].

%vorbesitzer1(-,-,-):
%    gibt zu allen Häuser_IDs alle Käufer und all deren Vorbesitzer aus.
?- vorbesitzer1(X,Besitzer,Vorbesitzer).
X = 1,
Besitzer = meier,
Vorbesitzer = [mueller] ;
X = 3,
Besitzer = schneider,
Vorbesitzer = [schulze, woehler, baumgartner] ;
X = 3,
Besitzer = mueller,
Vorbesitzer = [schulze, schneider, woehler, baumgartner] ;
X = 5,
Besitzer = piepenbrink,
Vorbesitzer = [bund] ;
X = 3,
Besitzer = baumgartner,
Vorbesitzer = [woehler].
-----------------------------------------------------------------


1.2:   
    Der Vorteil dieser Implementationsvariante ist, dass man die Vorbesitzer in der 
    richtigen Reihenfolge bekommt. Zudem ist sie richtungsunabhängig, wodurch man zB.
    mit dem selben Prädikat auch die direkt nachfolgenden Besitzer ermitteln kann.
    Nachteil ist, dass nur die unmittelbaren Vorbesitzer ausgegeben werden. 
    Wenn beispielsweise ein Eintrag fehlt, werden alle Vorbesitzer, 
    die nach diesem Eintrag kommen würden, nicht ausgegeben. 

-----------------------------------------------------------------
%vorbesitzer2(?ObjektID,?Besitzer,?Vorbesitzer)
vorbesitzer2(ObjektID,Besitzer,Vorbesitzer) :-
    bew(_,ObjektID,Vorbesitzer,Besitzer,_,_).

vorbesitzer2(ObjektID,Besitzer,Vorvorbesitzer) :-
    bew(_,ObjektID,Vorbesitzer,Besitzer,_,_),
    vorbesitzer2(ObjektID,Vorbesitzer,Vorvorbesitzer).
-----------------------------------------------------------------

Testanfragen:
-----------------------------------------------------------------
%vorbesitzer2(+,+,+):
    prüft, ob Besitzer und Vorbesitzer eines Hauses stimmen.
    Der Vorbesitzer muss dabei nicht der direkte Vorbesitzer sein.

%vorbesitzer2(+,+,-): 
    gibt nach und nach die genaue Abfolge der unmittelbaren Vorbesitzer aus.
    (false, wenn es keinen direkten Vorbesitzer (mehr) gibt.)

%vorbesitzer2(+,-,+):
    gibt nach und nach die unmittelbaren Nachbesitzer aus. 
    Die Reihenfolge ist dabei aber nicht richtig.
    (false, wenn es keinen direkt nachfolgenden Besitzer (mehr) gibt.)

%vorbesitzer2(+,-,-):
    gibt alle Besitzer und all ihre Vorbesitzer eines Hauses aus.

%vorbesitzer2(-,+,+):
    gibt alle Häuser-IDs eines Besitzers und Vorbesitzers aus.
    
%vorbesitzer2(-,+,-):
    gibt alle Häuser-IDs und die Vorbesitzer eines gegebenen Besitzers aus.

%vorbesitzer2(-,-,+):
    gibt alle Häuser-IDs und die Nachbesitzer eines gegebenen Besitzers aus.

%vorbesitzer2(-,-,-):
    gibt zu allen Häuser-IDs alle Besitzer und all ihre Vorbesitzer aus.
-----------------------------------------------------------------



Aufgabe 2: 
2.1:    
    Wenn es im einen Zyklus im Fluss gibt, dann ist die Definition nicht 
    terminierungssicher. Die Relation ist transitiv.

-----------------------------------------------------------------
%ist_betroffen_von(?Ort1,?Ort2)
ist_betroffen_von(Ort1,Ort2) :-
    stromaufwaerts(_,Ort2,Ort1,_).

ist_betroffen_von(Ort1,Ort3) :-
    stromaufwaerts(_,Ort2,Ort1,_),
    ist_betroffen_von(Ort2,Ort3).
-----------------------------------------------------------------

Testanfragen:
-----------------------------------------------------------------
%ist_betroffen_von(+,+):
    prüft, ob von Ort2 ein Fluss zu Ort1 führt.
?- ist_betroffen_von(meissen,usti).
true ;
false.

%ist_betroffen_von(+,-): 
    gibt von einem gegebenen Ort alle Vororte aus, von denen ein Fluss führt.
    Die Reihenfolge ist dabei nicht richtig.
?- ist_betroffen_von(frankfurt_oder, Ort2).
Ort2 = eisenhuettenstadt ;
Ort2 = muendung_neisse ;
false.

%ist_betroffen_von(-,+):
    gibt von einem gegebenen Ort aus alle nachfolgenden Orte, zu denen ein Fluss
    führt, in der richtigen Reihenfolge aus.
?- ist_betroffen_von(Ort1,wittenberge).
Ort1 = schnackenburg ;
Ort1 = geesthacht ;
Ort1 = hamburg ;
Ort1 = muendung_elbe ;
false.

%ist_betroffen_von(-,-):
    gibt für jeden Ort alle nachfolgenden Orte nacheinander an.
-----------------------------------------------------------------


2.2:    
-----------------------------------------------------------------
%ist_betroffen_von(?Ort1,?Ort2,?Entfernung)
ist_betroffen_von(Ort1,Ort2,Entfernung) :-
    stromaufwaerts(_,Ort2,Ort1,Distanz),
    Entfernung = Distanz.

ist_betroffen_von(Ort1,Ort3,Entfernung) :-
    stromaufwaerts(_,Ort2,Ort1,Distanz1),
    ist_betroffen_von(Ort2,Ort3,Distanz2),
    Entfernung is Distanz1+Distanz2.
-----------------------------------------------------------------

Testanfragen:
-----------------------------------------------------------------
%ist_betroffen_von(+,+,+):
    prüft, ob von Ort2 ein Fluss zu Ort1 führt und diese Orte die 
    angegebene Entfernung haben.
?- ist_betroffen_von(frankfurt_oder, eisenhuettenstadt,33).
true ;
false.

%ist_betroffen_von(+,+,-): 
    prüft, ob von Ort2 ein Fluss zu Ort1 führt und gibt, wenn das der Fall ist,
    die Entfernung der beiden Orte aus.
?- ist_betroffen_von(frankfurt_oder, muendung_neisse,Entfernung).
Entfernung = 44 ;
false.

%ist_betroffen_von(+,-,+): 
    gibt von einem gegebenen Ort alle Vororte aus, von denen ein Fluss führt und die
    angegebene Entfernung korrekt ist.
?- ist_betroffen_von(hamburg, Ort,154).
Ort = wittenberge ;
false.

%ist_betroffen_von(+,-,-): 
    gibt von einem gegebenen Ort alle Vororte, von denen ein Fluss führt, 
    zusammen mit der Entfernung aus.
?- ist_betroffen_von(frankfurt_oder, Ort2,Entfernung).
Ort2 = eisenhuettenstadt,
Entfernung = 33 ;
Ort2 = muendung_neisse,
Entfernung = 44 ;
false.

%ist_betroffen_von(-,+,+): 
    gibt von einem gegebenen Ort aus alle nachfolgenden Orte, zu denen ein Fluss
    führt und die entsprechend weit entfernt sind, aus.
?- ist_betroffen_von(Ort1,wittenberge,154).
Ort1 = hamburg ;
false.

%ist_betroffen_von(-,+,-): 
    gibt von einem gegebenen Ort aus alle nachfolgenden Orte zu denen ein Fluss
    führt, zusammen mit der Entfernung, in der richtigen Reihenfolge aus.
?- ist_betroffen_von(Ort1,wittenberge,Entfernung).
Ort1 = schnackenburg,
Entfernung = 21 ;
Ort1 = geesthacht,
Entfernung = 132 ;
Ort1 = hamburg,
Entfernung = 154 ;
Ort1 = muendung_elbe,
Entfernung = 279 ;
false.

%ist_betroffen_von(-,-,+): 
    gibt alle Orte an, bei der die Entfernung korrekt ist und von Ort2 zu Ort1 
    ein Fluss führt.
?- ist_betroffen_von(Ort1,Ort2,33).
Ort1 = muendung_saale,
Ort2 = rosslau ;
Ort1 = frankfurt_oder,
Ort2 = eisenhuettenstadt ;
false.

%ist_betroffen_von(-,-,-): 
    gibt für jeden Ort1 alle Vororte, von denen ein Fluss führt, und
    die jeweilige Entfernung an.
-----------------------------------------------------------------


2.3:  
    

2.4:
-----------------------------------------------------------------
%betroffene_orte(?Ungluecksort,-Ortsliste)
betroffene_orte(Ungluecksort,Ortsliste) :-
    findall([Ort1,Entfernung],
            ist_betroffen_von(Ort1,Ungluecksort,Entfernung),
            Ortsliste).
-----------------------------------------------------------------

Anfrage:
-----------------------------------------------------------------
?- betroffene_orte(bitterfeld,Orte).
Orte = [[rosslau, 27], [muendung_saale, 60], [magdeburg, 95], [tangermuende, 158], 
[muendung_havel, 192], [wittenberge, 223], [schnackenburg, 244], [geesthacht, 355], 
[hamburg, 377], [muendung_elbe, 502].

?- ist_betroffen_von(Ort,bitterfeld,Entfernung).
Ort = rosslau,
Entfernung = 27 ;
Ort = muendung_saale,
Entfernung = 60 ;
Ort = magdeburg,
Entfernung = 95 ;
Ort = tangermuende,
Entfernung = 158 ;
Ort = muendung_havel,
Entfernung = 192 ;
Ort = wittenberge,
Entfernung = 223 ;
Ort = schnackenburg,
Entfernung = 244 ;
Ort = geesthacht,
Entfernung = 355 ;
Ort = hamburg,
Entfernung = 377 ;
Ort = muendung_elbe,
Entfernung = 502 ;
false.
-----------------------------------------------------------------


2.5:


2.6:



