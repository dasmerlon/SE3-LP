SE3-LP WiSe 2020/2021
Übung Gr.04:
    Merle Hoffmann  (7031673)
    Lukas Kiefer    (7260745)
    Björn -------   (-------)


Aufgabenblatt 1:


Aufgabe 1: 
1.1: 
    Der Punkt kennzeichnet in Prolog das Ende einer Klausel.
    Wenn der Dateiname nicht in Hochkommas gesetzt wird, wird der Punkt in 
    familie.pl als Ende der Klausel interpretiert, weshalb es zur Fehlermeldung 
    kommt. Der Schrägstrich kennzeichnet in Prolog den Operator für die Division.
    Daher werden auch bei der Pfadangabe Hochkommas benötigt.
    Die Hochkommas verhindern, dass der Punkt, bzw. der Schrägstrich falsch 
    interpretiert wird und die Klausel richtig bis zum Ende gelesen werden kann.


1.2: 
    Mit listing(Prädikatsname) erhält man alle Daten in der Datenbank zu dem 
    angegebenen Prädikat. Zudem wird die Stelligkeit des Prädikats am Anfang 
    angezeigt.

---------------------------------------
?- listing([mutter_von, vater_von]).
:- dynamic mutter_von/2.

mutter_von(marie, hans).
mutter_von(marie, helga).
mutter_von(julia, otto).
mutter_von(barbara, klaus).
mutter_von(barbara, andrea).
mutter_von(charlotte, barbara).
mutter_von(charlotte, magdalena).

:- dynamic vater_von/2.

vater_von(otto, hans).
vater_von(otto, helga).
vater_von(gerd, otto).
vater_von(johannes, klaus).
vater_von(johannes, andrea).
vater_von(walter, barbara).
vater_von(walter, magdalena).

true.
---------------------------------------


1.3:
    Das Prädikat asserta/1 fügt die neue Klausel als erste Klausel (also an den 
    Anfang) hinzu, während das Prädikat assertz/1 die neue Klausel als letzte 
    Klausel (also ans Ende) hinzufügt.
    assert/1 ist ein veraltetes Prädikat, welches durch assertz/1 ersetzt wurde.
    Wenn eine Klausel hinzugefügt wird, welche bereits existiert, wird sie dennoch
    hinzugefügt, sodass sie beim Aufruf mit listing/1 mehrfach aufgeführt wird.



Aufgabe 2:
2.1:
a)  Ist Johannes der Vater von Klaus?
    - Ja.
---------------------------------------
?- vater_von(johannes, klaus).
true.
---------------------------------------


b)  Heißt die Mutter von Hans Julia?
    - Nein.
---------------------------------------
    ?- mutter_von(julia, hans).
    false.
---------------------------------------


c)  Wie heißt der Vater von Helga?
    - Otto.
---------------------------------------
    ?- vater_von(X, helga).
    X = otto.
---------------------------------------


d)  Wie heißt der Vater von Julia?
    - Julia hat keinen Vater, bzw. es gibt keinen Eintrag mit Julia als Kind.
---------------------------------------
    ?- vater_von(X, julia).
    false.
---------------------------------------
    

e)  Wer hat welche Kinder?
    - Marie und Otto sind die Eltern von Hans und Helga.
    - Julia und Gerd sind die Eltern von Otto.
    - Barbara und Johannes sind die Eltern von Klaus und Andrea.
    - Charlotte und Walter sind die Eltern von Barbara und Magdalena.
---------------------------------------
?- mutter_von(M, K), vater_von(V, K).
M = marie,
K = hans,
V = otto ;
M = marie,
K = helga,
V = otto ;
M = julia,
K = otto,
V = gerd ;
M = barbara,
K = klaus,
V = johannes ;
M = barbara,
K = andrea,
V = johannes ;
M = charlotte,
K = barbara,
V = walter ;
M = charlotte,
K = magdalena,
V = walter.
---------------------------------------


f)  Hat Magdalena keine Kinder?
    - Ja, sie hat keine Kinder.
---------------------------------------
?- \+mutter_von(magdalena,X).
true.
---------------------------------------


g)  Hat Barbara keine Kinder?
    - Nein, sie hat Kinder.
---------------------------------------
?- \+mutter_von(barbara,X).
false.
---------------------------------------


h) Hat Otto Kinder?
    - Ja, er hat Kinder.
---------------------------------------
?- \+ \+vater_von(otto,X).
true.
---------------------------------------


2.2:
    Man schaut, ob das Kind K von Charlotte ebenfalls ein Kind E hat.
    Da wir nicht wissen, ob Charlottes Kind männlich oder weiblich ist, 
    müssen wir beide Prädikate mutter_von und vater_von auf ein Enkelkind E
    prüfen. Das Semikolon operiert dabei als "oder".
    Charlottes Kind Barbara hat die zwei Kinder Klaus und Andrea. 
    Dies sind die Enkelkinder von Charlotte.
-----------------------------------------------------------------
?- mutter_von(charlotte, K), (mutter_von(K,E); vater_von(K,E)).
K = barbara,
E = klaus ;
K = barbara,
E = andrea ;
false.
-----------------------------------------------------------------


2.3:
    Es gibt vier Ports: Call, Redo, Exit und Fail
    Als erste Systemausgabe kommt immer "Call", da dies der Prädikataufruf ist. 
    Mit "Exit" wird die Prozedur verlassen und ein Resultat wird ausgegeben. 
    Wenn nach der Resultatausgabe kein Punkt folgt, kann man sich mit einem Semikolon
    weitere Variablenbindungen ausgeben lassen. Dann folgt die Systemausgabe "Redo",
    was das Backtracking anzeigt. Dabei wird zum letzten Entscheidungspunkt zurück-
    gegangen und alle Variablenbindungen, die bisher gemacht wurden, werden 
    zurückgesetzt. Wird der Prädikataufruf mit einem "Fail" verlassen, konnte kein
    Berechnungsergebnis (mehr) produziert werden. Der Aufruf ist somit gescheitert
    und beendet. Er lässt sich nicht mehr per Backtracking erneut betreten.
    Im Skript werden die Systemausgaben innerhalb des Vier-Port-Modells vorgestellt.

-----------------------------------------------------------------
?- trace.
true.

[trace]  ?- vater_von(johannes, klaus).             % 2.1.a
   Call: (10) vater_von(johannes, klaus) ? creep
   Exit: (10) vater_von(johannes, klaus) ? creep
true.

[trace]  ?- mutter_von(julia, hans).                % 2.1.b
   Call: (10) mutter_von(julia, hans) ? creep
   Fail: (10) mutter_von(julia, hans) ? creep
false.

[trace]  ?- vater_von(X, helga).                    % 2.1.c
   Call: (10) vater_von(_14950, helga) ? creep
   Exit: (10) vater_von(otto, helga) ? creep
X = otto.

[trace]  ?- vater_von(X, julia).                    % 2.1.d
   Call: (10) vater_von(_16558, julia) ? creep
   Fail: (10) vater_von(_16558, julia) ? creep
false.

[trace]  ?- mutter_von(M, K), vater_von(V, K).      % 2.1.e
   Call: (11) mutter_von(_21390, _21392) ? creep
   Exit: (11) mutter_von(marie, hans) ? creep
   Call: (11) vater_von(_21396, hans) ? creep
   Exit: (11) vater_von(otto, hans) ? creep
M = marie,
K = hans,
V = otto ;
   Redo: (11) mutter_von(_21390, _21392) ? creep
   Exit: (11) mutter_von(marie, helga) ? creep
   Call: (11) vater_von(_21396, helga) ? creep
   Exit: (11) vater_von(otto, helga) ? creep
M = marie,
K = helga,
V = otto ;
   Redo: (11) mutter_von(_21390, _21392) ? creep
   Exit: (11) mutter_von(julia, otto) ? creep
   Call: (11) vater_von(_21396, otto) ? creep
   Exit: (11) vater_von(gerd, otto) ? creep
M = julia,
K = otto,
V = gerd ;
   Redo: (11) mutter_von(_21390, _21392) ? creep
   Exit: (11) mutter_von(barbara, klaus) ? creep
   Call: (11) vater_von(_21396, klaus) ? creep
   Exit: (11) vater_von(johannes, klaus) ? creep
M = barbara,
K = klaus,
V = johannes ;
   Redo: (11) mutter_von(_21390, _21392) ? creep
   Exit: (11) mutter_von(barbara, andrea) ? creep
   Call: (11) vater_von(_21396, andrea) ? creep
   Exit: (11) vater_von(johannes, andrea) ? creep
M = barbara,
K = andrea,
V = johannes ;
   Redo: (11) mutter_von(_21390, _21392) ? creep
   Exit: (11) mutter_von(charlotte, barbara) ? creep
   Call: (11) vater_von(_21396, barbara) ? creep
   Exit: (11) vater_von(walter, barbara) ? creep
M = charlotte,
K = barbara,
V = walter ;
   Redo: (11) mutter_von(_21390, _21392) ? creep
   Exit: (11) mutter_von(charlotte, magdalena) ? creep
   Call: (11) vater_von(_21396, magdalena) ? creep
   Exit: (11) vater_von(walter, magdalena) ? creep
M = charlotte,
K = magdalena,
V = walter.

[trace]  ?- \+mutter_von(magdalena,X).                  % 2.1.f
   Call: (11) mutter_von(magdalena, _34416) ? creep
   Fail: (11) mutter_von(magdalena, _34416) ? creep
true.

[trace]  ?- \+mutter_von(barbara,X).                    % 2.1.g
   Call: (11) mutter_von(barbara, _36080) ? creep
   Exit: (11) mutter_von(barbara, klaus) ? creep
false.

[trace]  ?- \+ \+vater_von(otto,X).                     % 2.1.h
   Call: (11) vater_von(otto, _37602) ? creep
   Exit: (11) vater_von(otto, hans) ? creep
true.

[trace]  ?- nodebug.
true.
-----------------------------------------------------------------

